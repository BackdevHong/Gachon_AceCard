    using System;    using System.Collections.Generic;    using System.Net;    using System.Net.Sockets;    using UnityEngine;    public class Server : MonoBehaviour    {        public static Server Instance { get; private set; }        private TcpListener _server;        private List<ServerClient> _clients = new List<ServerClient>();        private const int Port = 7777;                private Dictionary<int, int> _playerCosts = new Dictionary<int, int>(); // 각 클라이언트의 코스트 관리        private int _currentRound = 1; // 현재 라운드        private int _turnCount = 0; // 현재 턴                private void Awake()        {            if (Instance == null)            {                Instance = this;                DontDestroyOnLoad(gameObject);            }            else            {                Destroy(gameObject);            }        }        // 서버 로직 함수들        public void CreateServer()        {            _server = new TcpListener(IPAddress.Any, Port);            _server.Start();            Debug.Log("Server Started.");            StartListening();        }        private void StartListening()        {            _server.BeginAcceptTcpClient(AcceptClientCallback, null);        }        private void AcceptClientCallback(IAsyncResult ar)        {            TcpClient newClient = _server.EndAcceptTcpClient(ar);            ServerClient serverClient = new ServerClient(newClient);            // 고유 ID를 클라이언트에 전송            Packet packet = new Packet();            packet.Write((int)PacketType.Welcome);            packet.Write(serverClient.PlayerID); // 클라이언트에 ID 전송            serverClient.SendData(packet.ToArray());            _playerCosts[serverClient.PlayerID] = 1; // 초기 코스트 설정            Debug.Log($"Assigned initial cost of 1 to Player {serverClient.PlayerID}");            HandleCostEvent();            _clients.Add(serverClient);            Debug.Log($"Client Connected: {newClient.Client.RemoteEndPoint} with Player ID: {serverClient.PlayerID}");                        StartListening();        }                public void HandleRoundEnd()        {            _currentRound++;            foreach (var playerId in _playerCosts.Keys)            {                _playerCosts[playerId]++; // 모든 플레이어의 코스트 증가            }            Debug.Log($"Round {_currentRound} ended. Costs updated.");            HandleCostEvent(); // 모든 클라이언트에 코스트 업데이트 전송        }                private void HandleCostEvent()        {            Packet packet = new Packet();            packet.Write((int)PacketType.CostUpdate);            string costData = JsonUtility.ToJson(_playerCosts); // 코스트 데이터 직렬화            packet.Write(costData);            Broadcast(packet.ToArray());        }                // 각종 이벤트 함수들        public void HandleAttackEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.AttackEvent attackEvent = JsonUtility.FromJson<Utilities.AttackEvent>(json);            Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}, Damage: {attackEvent.damage}");            _playerCosts[attackEvent.attackPlayerID] -= attackEvent.cost; // 공격자의 코스트 감소            // 공격 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);            HandleCostEvent();        }        public void HandleSkillEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.SkillEvent attackEvent = JsonUtility.FromJson<Utilities.SkillEvent>(json);            Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}");            // 공격 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }                public void HandleSwitchEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.SwitchEvent switchEvent = JsonUtility.FromJson<Utilities.SwitchEvent>(json);            Debug.Log($"Switch Event: Player {switchEvent.playerID}, Card {switchEvent.switchIndexed}");            // 교체 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }                public void HandleTurnEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.TurnEvent turnEvent = JsonUtility.FromJson<Utilities.TurnEvent>(json);            Debug.Log($"Turn Event: Player {turnEvent.currentTurnPlayerID}");            // 턴 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);                        _turnCount++;            if (_turnCount >= _clients.Count) // 모든 클라이언트가 턴을 끝냈다면            {                _turnCount = 0; // 턴 카운트 초기화                HandleRoundEnd(); // 라운드 종료 처리            }        }                // 기타 함수        private void OnApplicationQuit()        {            _server?.Stop();        }                // 전송 함수        public void Broadcast(byte[] data) {            foreach (var client in _clients)            {                client.SendData(data);            }        }    }