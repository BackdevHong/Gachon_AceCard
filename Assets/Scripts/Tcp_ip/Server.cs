using System;using System.Collections.Generic;using System.Net;using System.Net.Sockets;using UnityEngine;public class Server : MonoBehaviour{    public static Server Instance { get; private set; }    private TcpListener _server;    private List<ServerClient> _clients = new List<ServerClient>();    private const int Port = 7777;        // Turn 시스템    private int currentPlayerTurnID = 1; // 첫 번째 플레이어부터 시작    private float turnDuration = 30f; // 턴 시간 (초)    private float turnTimeRemaining;    private void Awake()    {        if (Instance == null)        {            Instance = this;            DontDestroyOnLoad(gameObject);        }        else        {            Destroy(gameObject);        }    }    public void CreateServer()    {        _server = new TcpListener(IPAddress.Any, Port);        _server.Start();        Debug.Log("Server Started.");        StartListening();    }    private void StartListening()    {        _server.BeginAcceptTcpClient(AcceptClientCallback, null);    }    private void AcceptClientCallback(IAsyncResult ar)    {        TcpClient newClient = _server.EndAcceptTcpClient(ar);        ServerClient serverClient = new ServerClient(newClient);        // 고유 ID를 클라이언트에 전송        Packet packet = new Packet();        packet.Write((int)PacketType.Welcome);        packet.Write(serverClient.PlayerID); // 클라이언트에 ID 전송        serverClient.SendData(packet.ToArray());        _clients.Add(serverClient);        Debug.Log($"Client Connected: {newClient.Client.RemoteEndPoint} with Player ID: {serverClient.PlayerID}");        StartListening();    }    public void Broadcast(byte[] data)    {        foreach (var client in _clients)        {            client.SendData(data);        }    }        public void HandleAttackEvent(byte[] data)    {        Packet packet = new Packet(data);        string json = packet.ReadString(); // JSON으로 데이터 읽기        Utilities.AttackEvent attackEvent = JsonUtility.FromJson<Utilities.AttackEvent>(json);        Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}, Damage: {attackEvent.damage}");        // 공격 이벤트를 모든 클라이언트로 브로드캐스트        Broadcast(data);    }    public void HandleSkillEvent(byte[] data)    {        Packet packet = new Packet(data);        string json = packet.ReadString(); // JSON으로 데이터 읽기        Utilities.SkillEvent attackEvent = JsonUtility.FromJson<Utilities.SkillEvent>(json);        Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}");        // 공격 이벤트를 모든 클라이언트로 브로드캐스트        Broadcast(data);    }        public void HandleSwitchEvent(byte[] data)    {        Packet packet = new Packet(data);        string json = packet.ReadString(); // JSON으로 데이터 읽기        Utilities.SwitchEvent switchEvent = JsonUtility.FromJson<Utilities.SwitchEvent>(json);        Debug.Log($"Switch Event: Player {switchEvent.playerID}, Card {switchEvent.switchIndexed}");        // 교체 이벤트를 모든 클라이언트로 브로드캐스트        Broadcast(data);    }        private void StartTurnCycle()    {        turnTimeRemaining = turnDuration;        BroadcastTurn();        InvokeRepeating(nameof(UpdateTurnTimer), 1f, 1f);    }        private void UpdateTurnTimer()    {        turnTimeRemaining -= 1f;        if (turnTimeRemaining <= 0f)        {            EndTurn();        }    }        private void BroadcastTurn()    {        Utilities.TurnEvent turnEvent = new Utilities.TurnEvent        {            currentTurnPlayerID = currentPlayerTurnID,            turnTimeRemaining = turnTimeRemaining        };        string json = JsonUtility.ToJson(turnEvent);        Packet packet = new Packet();        packet.Write((int)PacketType.Turn);        packet.Write(json);        Broadcast(packet.ToArray());    }        private void EndTurn()    {        currentPlayerTurnID = currentPlayerTurnID == 1 ? 2 : 1; // 턴 변경        StartTurnCycle();    }        private void OnApplicationQuit()    {        _server?.Stop();    }}