    using System;    using System.Collections;    using System.Collections.Generic;    using System.Net;    using System.Net.Sockets;    using UnityEngine;    public class Server : MonoBehaviour    {        public static Server Instance { get; private set; }        private TcpListener _server;        private List<ServerClient> _clients = new List<ServerClient>();        private const int Port = 7777;                private float remainingTime = 30f; // 기본 턴 시간 (초)        private bool isTimerRunning = false;                private void Awake()        {            if (Instance == null)            {                Instance = this;                DontDestroyOnLoad(gameObject);            }            else            {                Destroy(gameObject);            }        }        // 서버 로직 함수들        public void CreateServer()        {            _server = new TcpListener(IPAddress.Any, Port);            _server.Start();            Debug.Log("Server Started.");            StartListening();        }        private void StartListening()        {            _server.BeginAcceptTcpClient(AcceptClientCallback, null);        }        private void AcceptClientCallback(IAsyncResult ar)        {            TcpClient newClient = _server.EndAcceptTcpClient(ar);            ServerClient serverClient = new ServerClient(newClient);            // 고유 ID를 클라이언트에 전송            Packet packet = new Packet();            packet.Write((int)PacketType.Welcome);            packet.Write(serverClient.PlayerID); // 클라이언트에 ID 전송            serverClient.SendData(packet.ToArray());            _clients.Add(serverClient);            Debug.Log($"Client Connected: {newClient.Client.RemoteEndPoint} with Player ID: {serverClient.PlayerID}");            StartListening();        }                private void StartTurnTimer()        {            remainingTime = 30f; // 초기화            isTimerRunning = true;            StartCoroutine(TurnTimerCoroutine());        }                private IEnumerator TurnTimerCoroutine()        {            while (isTimerRunning && remainingTime > 0)            {                yield return new WaitForSeconds(1f);                remainingTime--;                // 모든 클라이언트에 남은 시간 브로드캐스트                BroadcastTurnTime(remainingTime);                if (remainingTime <= 0)                {                    EndTurnAutomatically();                }            }        }                private void BroadcastTurnTime(float time)        {            Packet packet = new Packet();            packet.Write((int)PacketType.TurnTimeSync);            packet.Write(time);            Broadcast(packet.ToArray());        }                private void EndTurnAutomatically()        {            isTimerRunning = false;            Debug.Log("시간 초과! 턴을 자동으로 종료합니다.");        }                // 각종 이벤트 함수들        public void HandleAttackEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.AttackEvent attackEvent = JsonUtility.FromJson<Utilities.AttackEvent>(json);            Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}, Damage: {attackEvent.damage}");            // 공격 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }         public void HandleSkillEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.SkillEvent attackEvent = JsonUtility.FromJson<Utilities.SkillEvent>(json);            Debug.Log($"Attack Event: Player {attackEvent.attackPlayerID}");            // 공격 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }                public void HandleSwitchEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.SwitchEvent switchEvent = JsonUtility.FromJson<Utilities.SwitchEvent>(json);            Debug.Log($"Switch Event: Player {switchEvent.playerID}, Card {switchEvent.switchIndexed}");            // 교체 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }                public void HandleTurnEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.TurnEvent turnEvent = JsonUtility.FromJson<Utilities.TurnEvent>(json);            Debug.Log($"Turn Event: Player {turnEvent.currentTurnPlayerID}");            // 턴 이벤트를 모든 클라이언트로 브로드캐스트            Broadcast(data);        }                public void HandleCostEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.CostEvent costEvent = JsonUtility.FromJson<Utilities.CostEvent>(json);                        Broadcast(data);        }                public void HandleCostAddEvent(byte[] data)        {            Packet packet = new Packet(data);            string json = packet.ReadString(); // JSON으로 데이터 읽기            Utilities.CostAddEvent costAddEvent = JsonUtility.FromJson<Utilities.CostAddEvent>(json);                        Broadcast(data);        }                public void HandleTurnTimeRequest(byte[] data)        {            Packet packet = new Packet(data);            int playerId = packet.ReadInt(); // 요청한 클라이언트 ID            Debug.Log($"Turn Time 요청 받음: Player {playerId}");            StartTurnTimer();        }                // 기타 함수        private void OnApplicationQuit()        {            _server?.Stop();        }                // 전송 함수        public void Broadcast(byte[] data) {            foreach (var client in _clients)            {                client.SendData(data);            }        }            }